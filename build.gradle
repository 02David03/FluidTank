buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = "https://plugins.gradle.org/m2/" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath group: 'gradle.plugin.com.matthewprenger', name: 'CurseGradle', version: '1.2.0'
        classpath group: "gradle.plugin.com.github.breadmoirai", name: "github-release", version: "2.2.8"
    }
}

apply plugin: 'scala'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: "com.matthewprenger.cursegradle"
apply plugin: "com.github.breadmoirai.github-release"
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

version = getProperty("modVersion")
group = "com.kotori316" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "LargeFluidTank"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileScala.sourceCompatibility = compileScala.targetCompatibility = '1.8'

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20190719-1.14.3'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('build/resources/main/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('Minecraft')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                fluidtank {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run-server')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                fluidtank {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('Minecraft')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'fluidtank', '--all', '--output', file('src/generated/resources/')

            mods {
                fluidtank {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
//    maven {
//        name "BuildCraft"
//        url = "https://mod-buildcraft.com/maven"
//    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "Hwyla"
        url "http://tehnut.info/maven"
    }
//    maven { // TThe One Probe
//        name 'tterrag maven'
//        url "https://maven.tterrag.com/"
//    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The user-dev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.14.4-28.0.40'
    implementation "org.scala-lang:scala-library:2.12.8"
    implementation group: 'org.typelevel', name: "cats-core_2.12", version: '1.6.0'

    def mc_version = "1.14.3"
    def jei_version = "6.0.0.8"

    implementation fg.deobf("mcp.mobius.waila:Hwyla:1.10.4-B65_1.14.2")
//    implementation  "mcp.mobius.waila:Hwyla:1.10.2-B58_${mc_version}:source"

    implementation fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")
//    implementation "mezz.jei:jei-${mc_version}:${jei_version}:sources"
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : "Kotori316",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Kotori316",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

task srcJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    manifest {
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : "Kotori316",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "Kotori316",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Tell the artifact system about our extra jars
artifacts {
    archives srcJar, deobfJar
}

curseforge {
    apiKey = project.hasProperty("curseforge_additional-enchanted-miner_key") ? getProperty("curseforge_additional-enchanted-miner_key") : ""
    project {
        id = '291006'
        changelogType = 'markdown'
        addGameVersion '1.14.4'
        changelog = file("changes.md")
        releaseType = 'release'
        mainArtifact jar
        addArtifact deobfJar
        addArtifact srcJar
        relations {
            requiredDependency 'scalable-cats-force'
        }
    }
    options {
        debug = false // defaults to false
        javaVersionAutoDetect = false
    }
}

githubRelease {
    repo = 'FluidTank'
    token = project.hasProperty("githubToken") ? getProperty("githubToken") : ""
    targetCommitish = '1.14.3'
    body {
        file("changes.md").text
    }
    releaseAssets = files(jar.archivePath)
}

task signJar2() << {
    ant.signjar(
            jar: jar.archivePath,
            alias: project.hasProperty('keyStoreAlias') ? project.getProperty('keyStoreAlias') : "",
            keystore: project.hasProperty('keyStore') ? project.getProperty("keyStore") : "",
            storepass: project.hasProperty('keyStorePass') ? project.getProperty('keyStorePass') : "",
            sigalg: "SHA1withRSA",
            digestalg: "SHA-256",
            tsaurl: "http://timestamp.digicert.com"
    )
    ant.signjar(
            jar: deobfJar.archivePath,
            alias: project.hasProperty('keyStoreAlias') ? project.getProperty('keyStoreAlias') : "",
            keystore: project.hasProperty('keyStore') ? project.getProperty("keyStore") : "",
            storepass: project.hasProperty('keyStorePass') ? project.getProperty('keyStorePass') : "",
            sigalg: "SHA1withRSA",
            digestalg: "SHA-256",
            tsaurl: "http://timestamp.digicert.com"
    )
}

// Runs this task automatically when build is ran.
assemble.dependsOn(signJar2)

task checkMethod() << {
    System.out.println("FilePath $jar.archivePath")
    System.out.println("FilePath $srcJar.archivePath")
    System.out.println("FilePath $deobfJar.archivePath")
    System.out.println("Name $project.name")
    System.out.println("BaseName $archivesBaseName")
    System.out.println("ModVersion ${getProperty("modVersion")}")
    println()
    println("changes.md")
    println(file("changes.md").text)
    println()
    println("hasGitHubToken ${project.hasProperty("githubToken")}")
    println("hasSignToken ${project.hasProperty("keyStore")}")
    println("hasCurseForgeToken ${project.hasProperty("curseforge_additional-enchanted-miner_key")}")
}
